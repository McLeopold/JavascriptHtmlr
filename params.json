{"name":"Javascript Htmlr","tagline":"Javascript DSL for html generation in the browser or on the server","body":"htmlr [![TravisCI](https://secure.travis-ci.org/McLeopold/JavascriptHtmlr.png?branch=master)](http://travis-ci.org/McLeopold/JavascriptHtmlr)\r\n=====\r\n\r\n\r\n*   Htmlr is a template language for Express.\r\n*   Htmlr is an easy way to create DOM elements in the browser.\r\n*   Htmlr is a Domain Specific Language (DSL) in javascript for generating HTML.\r\n\r\nHtmlr can be used on the server or in the browser.  In the browser it can\r\ngenerate HTML text for use with `.innerHTML` or it can generate document\r\nfragments for use with `.appendChild`.  Template files use a `.htmlr` extension\r\nand can be a javascript expression or a function that returns an Htmlr object.\r\n\r\nInstallation\r\n------------\r\n\r\n```bash\r\nnpm install htmlr\r\n```\r\n\r\nFor command line usage, install globaly:\r\n\r\n```bash\r\nnpm install htmlr -g\r\n```\r\n\r\nBrowser Usage\r\n-------------\r\n\r\nFor use in the browser, include the following script tag:\r\n\r\n```html\r\n<script src=\"lib/htmlr.js\"></script>\r\n```\r\n\r\nThen create your dynamic elements in the browser:\r\n\r\n```javascript\r\nwith (Htmlr) {\r\n  var template = div({class: 'person'},\r\n    'Name: ', span('{name}'), br,\r\n    'Email: ', span('{email}')\r\n  );\r\n}\r\n\r\nvar data = {name: 'Scott', email: 'scott@example.com'};\r\n\r\n// html text generation\r\ndocument.getElementById('my_div').innerHTML = template.render(data);\r\n\r\n// DOM object generation\r\ndocument.getElementById('my_div').appendChild( template.renderDOM(data) );\r\n```\r\n\r\n```html\r\n<div class=\"person\">\r\nName: <span>Scott</span><br />\r\nEmail: <span>scott@example.com</span>\r\n</div>\r\n```\r\n\r\nExpress Usage\r\n-------------\r\n\r\nCreate the following 2 template files to mimic the default express jade\r\ntemplates and put them in the views directory:\r\n\r\n*   `layout.htmlr`\r\n\r\n    ```javascript\r\n    doctype()\r\n    .html(\r\n      head(\r\n        title('{title}'),\r\n        css('/stylesheets/style.css')\r\n      ),\r\n      body('{content}')\r\n    )\r\n    ```\r\n\r\n*   `index.htmlr`\r\n\r\n    ```javascript\r\n    extend('layout', {\r\n\r\n    content:\r\n      h1('{title}')\r\n      .p('Welcome to {title}')\r\n        \r\n    })\r\n    ```\r\n\r\n*   `error.htmlr`\r\n\r\n    ```javascript\r\n    extend('layout', {\r\n\r\n    content:\r\n      h1('{message}')\r\n      .h2('{error.status}')\r\n      .pre('{error.stack}')\r\n        \r\n    })\r\n    ```\r\n\r\nThen modify the `app.js` file to change the default rendering engine to htmlr:\r\n\r\n```javascript\r\n// Configuration\r\n\r\napp.configure(function(){\r\n  app.set('views', __dirname + '/views');\r\n  app.set('view engine', 'htmlr');         // <=== put 'htmlr' right here\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n  app.use(app.router);\r\n  app.use(express.static(__dirname + '/public'));\r\n});\r\n```\r\n\r\nCommand Line Usage\r\n------------------\r\n\r\nHtmlr can also be used on the command line to test templates without an express\r\napplication running.  Create a filed called `template.htmlr` and a file with\r\njson data called `data.json`:\r\n\r\n*   `template.htmlr`\r\n\r\n    ```javascript\r\n    doctype()\r\n    .html(\r\n      head({lang: 'en'},\r\n        meta({charset: 'utf-8'}),\r\n        title('{title}'),\r\n        css('style.css'),\r\n        javascript('script.js')\r\n      ),\r\n      body(\r\n        h1(\"Hello World!\"),\r\n        comment(\"woot!\"),\r\n        div({id: 'content'}, '{content}')\r\n      )\r\n    )\r\n    ```\r\n\r\n*   `data.json`\r\n\r\n    ```json\r\n    {\"title\": \"My Title\", \"content\": \"My Content\"}\r\n    ```\r\n\r\nThen run the following command:\r\n\r\n```bash\r\nhtmlr template -d data.json -l\r\n```\r\n\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n  <head lang=\"en\">\r\n    <meta charset=\"utf-8\" />\r\n    <title>My Title</title>\r\n    <link rel=\"stylesheet\" href=\"style.css\" />\r\n    <script src=\"script.js\"></script>\r\n  </head>\r\n  <body>\r\n    <h1>Hello World!</h1>\r\n    <!--woot!-->\r\n    <div id=\"content\">\r\n      My Content\r\n    </div>\r\n  </body>\r\n</html>\r\n```\r\n\r\n\r\n*   Use the `with` statement to prevent pollution of the global namespace in the\r\n    browser.  ( `with` is forbidden in strict mode :( )\r\n\r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template = div();\r\n    }    \r\n    var html = template.render();\r\n    ```\r\n    \r\n    ```html\r\n    <div />\r\n    ```\r\n\r\nFeatures\r\n--------\r\n\r\n1.  Use an object literal as the first parameter to set attributes\r\n\r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template = div({id: 'mydiv', class: 'awesome'});\r\n    }    \r\n    var html = template.render();\r\n    ```\r\n    \r\n    ```html\r\n    <div id=\"mydiv\" class=\"awesome\" />\r\n    ```\r\n\r\n2.  Use any other data type for the first parameter and all data types afterward\r\n    for child nodes\r\n   \r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template = div('Literal String', br, 1337);\r\n    }   \r\n    var html = template.render();\r\n    ```\r\n    \r\n    ```html\r\n    <div>Literal String<br />1337</div>\r\n    ```\r\n\r\n3.  Chain objects together to create siblings\r\n\r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template = div().div();\r\n    }\r\n    var html = template.render();\r\n    ```\r\n    \r\n    ```html\r\n    <div /><div />\r\n    ```\r\n\r\n4.  Create templates that can be reused.  Pass data structures to templates to\r\n    ease variable generation\r\n   \r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template = div({id: '{id}', class: '{class}'},\r\n        '{content}'\r\n      )\r\n    }\r\n    \r\n    var data1 = {id: 'one', class: 'first second', content: 'Hello'};\r\n    var data2 = {id: 'two', class: 'third', content: 'World!'};\r\n    \r\n    var html = template.render(data1) + template.render(data2);\r\n    ```\r\n    \r\n    ```html\r\n    <div id=\"one\" class=\"first second\">Hello</div>\r\n    <div id=\"two\" class=\"third\">World!</div>\r\n    ```\r\n\r\n4.  Use substitution syntax for creating templates that can be fed data, either\r\n    objects or arrays\r\n\r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template1 = div('{name}');\r\n    }\r\n    var data1 = {name: 'Scott'};\r\n    var html1 = template1.render(data1);\r\n    ```\r\n    \r\n    ```html\r\n    <div>Scott</div>\r\n    ```    \r\n\r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template2 = div('{0}');\r\n    }\r\n    var data2 = ['Scott'];\r\n    var html2 = template2.render(data2);\r\n    ```\r\n    \r\n    ```html\r\n    <div>Scott</div>\r\n    ```\r\n    \r\n5.  Loop through data structures, objects or arrays, using the `each` construct\r\n\r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template1 = (\r\n        ul(each()(\r\n          li('{0}')\r\n        ))\r\n      );\r\n    }\r\n    var data1 = ['one', 'two', 'three'];\r\n    var html1 = template1.render(data1);\r\n    ```\r\n    \r\n    ```html\r\n    <ul>\r\n      <li>one</li>\r\n      <li>two</li>\r\n      <li>three</li>\r\n    </ul>\r\n    ```\r\n        \r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template2 = (\r\n        ul(each()(\r\n          li('{key}: {value}')\r\n        ))\r\n      );\r\n    }\r\n    var data2 = {1: 'one', 2: 'two', 3: 'three'};\r\n    var html2 = template2.render(data2);\r\n    ```\r\n    \r\n    ```html\r\n    <ul>\r\n      <li>1: one</li>\r\n      <li>2: two</li>\r\n      <li>3: three</li>\r\n    </ul>\r\n    ```\r\n\r\n    `each` can also take a static list:\r\n\r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template = (\r\n        select(each(['North', 'South', 'East', 'West'])(\r\n          option('{0}')\r\n        )\r\n      );\r\n    }    \r\n    var html = template.render();\r\n    ```\r\n    \r\n    ```html\r\n    <select>\r\n      <option>North</option>\r\n      <option>South</option>\r\n      <option>East</option>\r\n      <option>West</option>\r\n    </select>\r\n    ```\r\n\r\n6.  Includes the ability to extracts parts of the data object\r\n\r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template1 = div(extract('error')(\r\n        'Error',\r\n        span('{number}'),\r\n        ': ',\r\n        span('{message}')\r\n      ));\r\n    }\r\n    var data1 = {error: {number: 42, message: 'unknown question'}};\r\n    var html1 = template1.render(data1);\r\n    ```\r\n   \r\n    ```html\r\n    <div>Error <span>42</span>: <span>unknown question</span></div>\r\n    ```\r\n   \r\n    `extract` can reach into multiple levels of data structure\r\n   \r\n    ```javascript\r\n    with (Htmlr) {\r\n      var template2 = extract(1, 0)(div('{0}'));\r\n    }\r\n    var data2 = [[[0, 1], [2, 3]], [[4, 5], [6, 7]]];\r\n    var html = template2.render(data2);\r\n    ```\r\n   \r\n    ```html\r\n    <div>4</div>\r\n    ```\r\n\r\nKnown Issues\r\n------------\r\n\r\nNone yet.  We need more testers!","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}